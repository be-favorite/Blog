{
  "hash": "61c9cffef54c72dfc137649500726c5b",
  "result": {
    "markdown": "---\ntitle: \"tidyverse로 데이터베이스랑 대화하기 - 1편\"\ndescription: |\n  R을 통해 데이터베이스 관련 작업을 한다면, 꼭 SQL 전문가가 될 필요는 없어요!\ndate: \"2022-04-07\"\ndraft: FALSE\npreview: preview.jpg\ncitation:\n  url: https://taemobang.com/posts/2022-04-07-talk-with-database-using-tidyverse-part-i/\ncategories: [SQL, R]\nbibliography: references.bib\n---\n\n\n\n\n[![Photo by Caspar Camille Rubin on Unsplash](preview.jpg){width=\"800\"}](https://unsplash.com/photos/fPkvU7RDmCo?utm_source=unsplash&utm_medium=referral&utm_content=creditShareLink)\n\n<aside>본 글은 [@naidoo2020]를 기반으로 작성되었습니다.</aside>\n\n실무에서는 Data analyst, Data scientist를 가리지 않고 SQL에 관한 능력을 요구합니다. 우리나라의 채용공고를 둘러보면 Data analyst의 경우 특히 SQL 스킬을 중요하게 요구하는 듯 합니다. 방대한 양의 데이터를 저장하고 관리하기 위해 실무에서는 데이터베이스를 사용합니다. 데이터베이스는 종종 관계형 데이터베이스 시스템[^1](이하 RDBMS)이라 불리기도 하죠. 그리고, 우리는 SQL[^2] 언어 또는 SQL을 조금 변형한(variant) 언어를 통해 이 데이터베이스에 질의(query)를 합니다. 여기서 변형이라는 말을 사용한 이유는, RDBMS를 제공하는 업체에서 표준화된 SQL을 제공하는 경우도 있지만, 표준화된 SQL을 조금 변형시켜 사용하는 경우도 있기 때문입니다.\n\n[^1]: relational database management system, or RDBMS\n\n[^2]: Structured Query Language\n\n만약 이렇게 특정 업체로부터 제공되는 변형된 RDBMS를 사용해야한다면, 해당 업체에서 사용하는 특정 SQL dialect[^3]를 사용해 쿼리를 작성하는 방법을 이해해야 하실겁니다. 변형된 RDBMS를 예로 들어보자면, [PostgreSQL](https://www.postgresql.org), [PrestoDB](https://prestodb.io)([AWS의 Athena](https://aws.amazon.com/ko/athena/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)를 위한) 등이 있습니다. PostgreSQL DB의 JSON 필드는 AWS에서 구조화된 중첩 배열로(array) 수집되므로, 동일한 필드를 쿼리하고자 할 때 다른 쿼리문을 사용합니다.\n\n[^3]: 공급업체마다 SQL 쿼리문에 조금씩 차이가 있는 부분을 방언의 의미를 갖는 dialect로 표현한 것 같습니다.\n\nR을 사용하는 여러분 모두 잘 아시다시피, R에서는 `{dplyr}`[^4] 패키지를 통해 이러한 작업을 데이터에 수행할 수 있습니다. `{dplyr}`이 `select()`, `group_by()`, `left_join()` 등 SQL 문법을 잘 모방하긴 했지만, SQL 문법과 R 문법 사이를 완벽하게 왔다갔다 하기는 어렵습니다. 예를 들자면, `{dplyr}`의 `filter()`를 이용해 특정 행을 뽑아올 때, 우리는 R 문법을 따라야하므로 조건문에 `=`이 아닌 `==`을 사용하죠. 이는 SQL 문법과는 완벽히 다른 부분입니다.\n\n[^4]: 명확하게 정해진 바는 없어보이나, d-plier라고 흔히 읽는 듯 합니다. 패키지의 스티커 이미지를 보면 플라이어가 그려져 있습니다.\n\n자, 여기서 이러한 상황을 타개할 방법은 무엇일까요. 엄청난 용량의 데이터베이스를 R로 가져올 수는 없습니다. 메모리 베이스인 R에 이 짓을 햇다가는요? 생각도 하기 싫습니다.😰 그럼, RDBMS 환경에서 이러한 무거운 작업을(e.g. computation) 수행하고 필요로 될 때에만 R에다가 가져오면 되지 않을까요? 예를 들면, 집계된 데이터를 가져와서 보고서용 그림을 그린다든지. 이를 가능하게끔 해주는 패키지에 대해 배워보려고 합니다.\n\n본 튜토리얼에서는 `{dplyr}`의 데이터베이스 백엔드 버전이라 할 수 있는 `{dbplyr}` 패키지에 대해 배울거에요. `{dbplyr}`은 당신의 RDBMS에 R의 tidyverse 문법을 사용한 쿼리문을 직접적으로 사용할 수 있게끔 해줄겁니다.😀\n\n## 1 DB 연결하기\n\n먼저 필요한 패키지를 불러오죠. `install.packages(\"패키지명\")`을 통해 설치할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(dbplyr)\nlibrary(dplyr)\nlibrary(RSQLite)\nlibrary(odbc)\n```\n:::\n\n\n-   `{DBI}`: R의 데이터베이스 인터페이스에 관한 메인 패키지입니다.\n-   `{dbplyr}`: `{dplyr}` 문법을 사용하여 데이터베이스에 질의를 할 수 있게끔 해줍니다.\n-   `{dplyr}`: 데이터베이스에 질의할 때 사용할 패키지입니다.\n-   `{RSQLite}`: 가벼운 단일 유저용 데이터베이스 SQLite DB에 연결할 수 있게끔 해주는 DBI[^5] 호환 패키지입니다. R-SQLite로 이해하시면 편합니다.\n-   다른 DBI 용 호환 패키지가 필요할 수도 있습니다. 예를 들어, `{RPostgres}`는 PostgreSQL RDBMS와 연결을 해주는 패키지입니다.[^6]\n-   `{odbc}`: odbc 드라이버를 사용해 RDBMS 인터페이스에 인터페이스할 수 있도록 해주는 DBI 호환 인터페이스입니다.[^7]\n\n[^5]: DataBase Interface, 데이터베이스 인터페이스의 약어\n\n[^6]: 본 예제에서는 다루지 않지만, [Rstudio DB](https://db.rstudio.com)에서 많은 것을 확인할 수 있습니다.\n\n[^7]: 본 예제에서는 다루지 않지만, [Rstudio DB](https://db.rstudio.com)에서 확인할 수 있습니다.\n\n### 예제용 토이 DB\n\n[Alison Hill](https://www.apreshill.com)이 [The Great British Bake off](https://github.com/apreshill/bakeoff)에서 만든 데이터를 사용하려고 합니다. 본 예제에서 다룰 데이터베이스는 [여기서](https://github.com/be-favorite/Distill/blob/master/_posts/2022-04-07-talk-with-database-using-tidyverse-part-i/data/great_brit_bakeoff.db) 내려받으세요. `{bakeoff}` 패키지의 데이터를 이용해 연습에 사용할 SQLite DB를 만들었습니다. 이 튜토리얼의 원 저자 [Vebash Naidoo](https://sciencificity-blog.netlify.app/posts/2020-12-12-using-the-tidyverse-with-databases/)님께 감사의 말을 전합니다.\n\n### SQLite DB 연결하기\n\n이제 DB를 SQLite DB에 연결해봅시다. DB와 대화를 나누기 위해서, 우선 연결(connection)을 해줘야합니다. 다음의 작업을 해줄겁니다.\n\n-   DBI 패키지 로딩: `library(DBI)`\n\n-   연결하기: `con <- dbConnect(RSQLite::SQLite(), \"내려받은 db 경로\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI) # main DB interface\nlibrary(dplyr) \nlibrary(dbplyr) # dplyr back-end for DBs\n\ncon <- dbConnect(drv = RSQLite::SQLite(), # give me a SQLite connection\n        dbname = \"data/great_brit_bakeoff.db\")\nsummary(con) # What do we have?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Length            Class             Mode \n               1 SQLiteConnection               S4 \n```\n:::\n:::\n\n\n위와 같은 명령어가 출력되면 DB에 성공적으로 연결된 것입니다.\n\n## 2 DB 둘러보고 다뤄보기\n\n자, DB 연결도 했으니 이제 몇 가지 DBI 함수를 이용해 연결한 DB를 둘러보고 다뤄봅시다.\n\n### DBI 함수\n\nDBI 함수들의 이름은 꽤 직관적입니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(con) # 연결된 테이블 리스트를 보여줘!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"baker_results\"     \"bakers\"            \"bakes\"            \n [4] \"challenge_results\" \"challenges\"        \"episode_results\"  \n [7] \"episodes\"          \"ratings\"           \"ratings_seasons\"  \n[10] \"results\"           \"seasons\"           \"series\"           \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con, # 연결한 DB로 가서\n      \"bakers\")   # bakes 테이블에 어떤 필드가 있는지 알려줘!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"series\"     \"baker_full\" \"age\"        \"occupation\" \"hometown\"  \n```\n:::\n:::\n\n\nDB에 질의는 다음과 같이 수행할 수 있어요.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- dbSendQuery(con, \"SELECT * FROM bakers LIMIT 3\") # 쿼리문 실행\n# bakers 테이블에 모든 필드를 가져오는데, 관측치 3개까지만 가져와봐!\ndbFetch(res) # 결과 출력해줘\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  series          baker_full age                        occupation\n1      1       Annetha Mills  30                           Midwife\n2      1      David Chambers  31                      Entrepreneur\n3      1 Edward \"Edd\" Kimber  24 Debt collector for Yorkshire Bank\n       hometown\n1         Essex\n2 Milton Keynes\n3      Bradford\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbClearResult(res) # 결과 지우기\n```\n:::\n\n\n### dplyr 함수\n\n이제, 우리가 잘하는 `{dplyr}`의 함수들을 이용해 마음껏 DB와 이야기해보죠.\n\n-   `dplyr::tbl(con, \"테이블명\")`: 연결한 DB(`con`)으로 가서 `SELECT * FROM 테이블명` 실행해줘.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"bakers\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<bakers> [?? x 5]\n# Database: sqlite 3.39.1 [/Volumes/Essential/Study/Private/Writing/Blog/posts/2022-04-07-talk-with-database-using-tidyverse-part-i/data/great_brit_bakeoff.db]\n   series baker_full                age occupation                       homet…¹\n    <dbl> <chr>                   <dbl> <chr>                            <chr>  \n 1      1 \"Annetha Mills\"            30 Midwife                          Essex  \n 2      1 \"David Chambers\"           31 Entrepreneur                     Milton…\n 3      1 \"Edward \\\"Edd\\\" Kimber\"    24 Debt collector for Yorkshire Ba… Bradfo…\n 4      1 \"Jasminder Randhawa\"       45 Assistant Credit Control Manager Birmin…\n 5      1 \"Jonathan Shepherd\"        25 Research Analyst                 St Alb…\n 6      1 \"Lea Harris\"               51 Retired                          Midlot…\n 7      1 \"Louise Brimelow\"          44 Police Officer                   Manche…\n 8      1 \"Mark Whithers\"            48 Bus Driver                       South …\n 9      1 \"Miranda Gore Browne\"      37 Food buyer for Marks & Spencer   Midhur…\n10      1 \"Ruth Clemens\"             31 Retail manager/Housewife         Poynto…\n# … with more rows, and abbreviated variable name ¹​hometown\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"bakers\") %>% \n    head(3) # \"SELECT * FROM bakers LIMIT 3\"와 동일\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [3 x 5]\n# Database: sqlite 3.39.1 [/Volumes/Essential/Study/Private/Writing/Blog/posts/2022-04-07-talk-with-database-using-tidyverse-part-i/data/great_brit_bakeoff.db]\n  series baker_full                age occupation                        homet…¹\n   <dbl> <chr>                   <dbl> <chr>                             <chr>  \n1      1 \"Annetha Mills\"            30 Midwife                           Essex  \n2      1 \"David Chambers\"           31 Entrepreneur                      Milton…\n3      1 \"Edward \\\"Edd\\\" Kimber\"    24 Debt collector for Yorkshire Bank Bradfo…\n# … with abbreviated variable name ¹​hometown\n```\n:::\n:::\n\n\n데이터베이스와 대화를 나눌 때 마다 초기에 연결해둔 `con`을 사용한다는 점을 유념해주세요. 초기에 불러왔던 `con`은 아까처럼 일반적인 SQL 쿼리문을 이용해 질의를 할 때 뿐만이 아닌 `{dplyr}`을 통해 타이디한 파이프라인으로 원하는 테이블을 가져올 때도 사용됩니다.\n\n자 이제 예시 상황을 하나 들어서 `{dplyr}`로 원하는 테이블을 가져와보겠습니다. `baker_results` 테이블에는 각 제빵 대회에 참가한 제빵사(baker)의 세부 정보 필드가 담겨있습니다:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con, \"baker_results\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"series\"                    \"baker_full\"               \n [3] \"baker\"                     \"age\"                      \n [5] \"occupation\"                \"hometown\"                 \n [7] \"baker_last\"                \"baker_first\"              \n [9] \"star_baker\"                \"technical_winner\"         \n[11] \"technical_top3\"            \"technical_bottom\"         \n[13] \"technical_highest\"         \"technical_lowest\"         \n[15] \"technical_median\"          \"series_winner\"            \n[17] \"series_runner_up\"          \"total_episodes_appeared\"  \n[19] \"first_date_appeared\"       \"last_date_appeared\"       \n[21] \"first_date_us\"             \"last_date_us\"             \n[23] \"percent_episodes_appeared\" \"percent_technical_top3\"   \n```\n:::\n:::\n\n\n각 제빵대회 우승자의 출신이 영국의 일부 지역에서 나왔는지, 아니면 다양한 지역으로부터 우상자가 배출되었는지 알고싶은 상황이라고 해봅시다. 우선 다음과 같이 관심있는 필드만 불러와주겠습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"baker_results\") %>% \n  select(series, baker, hometown, series_winner)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [?? x 4]\n# Database: sqlite 3.39.1 [/Volumes/Essential/Study/Private/Writing/Blog/posts/2022-04-07-talk-with-database-using-tidyverse-part-i/data/great_brit_bakeoff.db]\n   series baker     hometown              series_winner\n    <dbl> <chr>     <chr>                         <int>\n 1      1 Annetha   Essex                             0\n 2      1 David     Milton Keynes                     0\n 3      1 Edd       Bradford                          1\n 4      1 Jasminder Birmingham                        0\n 5      1 Jonathan  St Albans                         0\n 6      1 Lea       Midlothian, Scotland              0\n 7      1 Louise    Manchester                        0\n 8      1 Mark      South Wales                       0\n 9      1 Miranda   Midhurst, West Sussex             0\n10      1 Ruth      Poynton, Cheshire                 0\n# … with more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n24개 열 중 관심있는 4개 열만 불러왔습니다. 이제 제빵대회에 우승한 사람만 골라낸 뒤(`filter()`) 우승자들이 영국의 어떤 지역으로 부터 왔는지 지역별로 인원을 구하고(`count()`) 내림차순 정렬(`sort()`)을 해보죠.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"baker_results\") %>% \n  select(series, baker, hometown, series_winner) %>% \n  filter(series_winner == 1) %>%\n  count(hometown, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:     SQL [8 x 2]\n# Database:   sqlite 3.39.1 [/Volumes/Essential/Study/Private/Writing/Blog/posts/2022-04-07-talk-with-database-using-tidyverse-part-i/data/great_brit_bakeoff.db]\n# Ordered by: desc(n)\n  hometown                              n\n  <chr>                             <int>\n1 Wigan                                 1\n2 West Molesey, Surrey                  1\n3 Ongar, Essex                          1\n4 Market Harborough, Leicestershire     1\n5 Leeds / Luton                         1\n6 Bradford                              1\n7 Barton-Upon-Humber, Lincolnshire      1\n8 Barton-Le-Clay, Bedfordshire          1\n```\n:::\n:::\n\n\n이 결과에 따르면, 제빵대회 우승자들의 출신 지역은 각기 다르다고 결론을 내릴 수 있겠네요.\n\n### dplyr 문법을 SQL 쿼리문으로\n\n앞서 `{dplyr}`을 이용해 수행한 질의를 SQL 쿼리문으로는 어떻게 작성할까요? 코드 한 줄이면 손쉽게 알 수 있습니다.😀\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"baker_results\") %>% \n  select(series, baker, hometown, series_winner) %>% \n  filter(series_winner == 1) %>% \n  count(hometown, sort = TRUE) %>% \n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT `hometown`, COUNT(*) AS `n`\nFROM (\n  SELECT `series`, `baker`, `hometown`, `series_winner`\n  FROM `baker_results`\n)\nWHERE (`series_winner` = 1.0)\nGROUP BY `hometown`\nORDER BY `n` DESC\n```\n:::\n:::\n\n\n멋지지 않습니까? 이제 제가 왜 이 글의 맨 위 요약을 \"R을 통해 데이터베이스 관련 작업을 한다면, 꼭 SQL 전문가가 될 필요는 없어요!\"라고 적은 지 아시겠나요? `{dplyr}`로 작업을 수행하고, SQL 쿼리문으로 변환을 수행해보는 작업은 SQL을 배우는 과정에 꽤 큰 도움이 될겁니다. 직장 또는 기관에서 DB를 관리할 때 모두 같은 업체의 SQL DB를 사용하는 건 아니므로, 이렇게 광범위한 업체들로부터 공급되는 SQL을 알고, 읽는 것은 언제나 중요하기 때문입니다.\n\n### 출력문의 `lazy query / ??`의 의미\n\n앞서 테이블, 쿼리를 작성하며 출력물에서 `Source: table [?? x 5]` 또는 `Source: lazy query [?? x 4]`와 같은 문장을 확인하실 수 있었을 겁니다.\n\n#### 이런 문장이 출력물에 포함되는 이유\n\n-   먼저, 우리가 직접적인 RDBMS 상에서가 아닌 R이라는 공간을 빌려 뒤에서(behind the scenes) 작성한 `dplyr`코드는 우리가 연결하려는 DB의 SQL에 해당하는 dialect로 변환됩니다.\n\n-   즉, SQL은 DB에 직접적으로 실행됩니다. 즉, 데이터를 먼저 R로 가져와서 조작하는 것이 아닌 쿼리 자체를 DB에 보내고 DB에서 계산(computation)이 수행됩니다.\n\n-   정리하면, `dplyr` 파이프라인을 사용해 DB에서 쿼리를 실행하면, DB에서 계산을 수행하고 실행된 최종 결과의 전체가 아닌 일부를 R에서 보여주는 식입니다.\n\n-   이러한 이유들을 들여다보면 우리는 `??`를 이해할 수 있습니다.\n\n-   `??`는 \"연결 DB `con`에서 이 쿼리(파이프라인을 SQL로 변환시킨 것)를 실행했고, 여기 R에서 출력물을 스니펫(snippet)으로만 가져왔는데, 얼마나 많은 수의 행이 있는지에 관한 메타 정보까진 캐치하진 못했어. 그저 출력물에 몇 개의 열이 있다는 것 정도만 캐치했어\"라고 이해할 수 있습니다.\n\n-   이 튜토리얼은 파트 1 입니다. 다음 파트에서 가져온 테이블에 얼마나 많은 행들이 존재하는 지와 같은 메타 정보들을 R로 어떻게 가져오는지에 대해 알아볼 예정입니다.\n\n## 3 DB 연결 해제하기\n\n작업이 끝나면 연결을 해제하는 것을 잊지마세요!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con) # db 연결 닫기\n```\n:::\n\n\n연결 해제가 체크는 `dbListTable(con)`을 실행해보시면 됩니다. 연결해제가 잘 되었다면 에러문이 출력될겁니다.\n\n### 다음 파트에서 배울 내용\n\n-   `{DBI}`: R의 데이터베이스 인터페이스에 관한 메인 패키지입니다.\n-   데이터 R로 가져오기\n\n::: {.callout-tip collapse=\"true\"}\n## 세션정보를 보려면 누르세요\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Monterey 12.6\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Asia/Seoul\n date     2022-09-19\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   1.0.38 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n DBI         * 1.1.3   2022-06-18 [1] CRAN (R 4.2.0)\n dbplyr      * 2.2.1   2022-06-27 [1] CRAN (R 4.2.0)\n dplyr       * 1.0.9   2022-04-28 [1] CRAN (R 4.2.0)\n odbc        * 1.3.3   2021-11-30 [1] CRAN (R 4.2.0)\n RSQLite     * 2.2.15  2022-07-17 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}